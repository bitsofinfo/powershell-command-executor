module.exports = PSCommandService;

var Promise = require('promise');
var Mustache = require('mustache');

/**
* PSCommandService
*
* @param statefulProcessCommandProxy all commands will be executed over this
* @param commandRegistry registry/hash of Powershell commands
*        @see o365CommandRegistry.js for examples
*
*/
function PSCommandService(statefulProcessCommandProxy,commandRegistry) {
    this._statefulProcessCommandProxy = statefulProcessCommandProxy;
    this._commandRegistry = commandRegistry;
}

/**
* Returns an array of all available command objects
*
* { commandName:name, command:commandString, arguments:{}, return: {} }
*
*/
PSCommandService.prototype.getAvailableCommands = function() {
    var commands = [];
    for (var cmd in this._commandRegistry) {
        commands.push({
          'commandName' : cmd,
          'command' : this._commandRegistry[cmd].command,
          'arguments' : this._commandRegistry[cmd].arguments,
          'return' : this._commandRegistry[cmd].return
        });

    }

    return commands;
}

/**
* getStatus()
*
* Return the status of all managed processes, an array
* of structured ProcessProxy status objects
*/
PSCommandService.prototype.getStatus = function() {
    var status = this._statefulProcessCommandProxy.getStatus();
    return status;
}

/**
* executeForStdout()
*
* Executes a named powershell command as registered in the
* command registry, applying the values from the argument map
* returns a promise that when fulfilled returns the stdout
* from the command.
*
* On reject an error message
*
* @param commandName
* @param argument2ValueMap
*/
PSCommandService.prototype.executeForStdout = function(commandName, argument2ValueMap) {
    return this._execute(commandName,argument2ValueMap).stdout;
}

/**
* generateCommand()
*
* Generates an actual powershell command as registered in the
* command registry, applying the values from the argument map
* returns a literal command string that can be executed
*
*
* @param commandName
* @param argument2ValueMap
*/
PSCommandService.prototype.generateCommand = function(commandName, argument2ValueMap) {
    var commandConfig = this._commandRegistry[commandName];
    var generated = this._generateCommand(commandConfig, argument2ValueMap);
    return generated;
}

/**
* execute()
*
* Executes a named powershell command as registered in the
* command registry, applying the values from the argument map
* returns a promise that when fulfilled returns the cmdResult
* object from the command which contains properties
* (command, stdout, stderr)
*
* On reject an error message
*
* @param array of commands
*/
PSCommandService.prototype.execute = function(commandName, argument2ValueMap) {
  var command = this.generateCommand(commandName, argument2ValueMap);
  return this._execute(command);
}

/**
* executeAll()
*
* Expects an array of commandNames -> argMaps to execute in order
*   [
*      {commandName: name1, argMap: {param:value, param:value, ...}},
*      {commandName: name2, argMap: {param:value, param:value, ...}},
*   ]
*
* Executes the named powershell commands as registered in the
* command registry, applying the values from the argument maps
* returns a promise that when fulfilled returns an cmdResults array
* where each entry contains
*            [
*              {commandName: name1, command:cmd1, stdout:xxxx, stderr:xxxxx},
*              {commandName: name2, command:cmd2, stdout:xxxx, stderr:xxxxx}
*            ]
*
* On reject an error message
*
* @param array of commands
*/
PSCommandService.prototype.executeAll = function(cmdName2ArgValuesList) {

  var commandsToExec = [];
  var cmdResults = [];

  for (var i=0; i<cmdName2ArgValuesList.length; i++) {
      var cmdRequest = cmdName2ArgValuesList[i];
      var command = this.generateCommand(cmdRequest.commandName, cmdRequest.argMap);
      commandsToExec.push(command);
  }

  // execute and get back ordered results
  var cmdResults = this._executeCommands(commandsToExec);

  // iterate over them (the order will match the order of the cmdName2ArgValuesList)
  // modify each cmdResult adding the commandName attribute
  for (var i=0; i<cmdResults.length; i++) {
      var cmdResult = cmdResults[i];
      var cmdRequest = cmdName2ArgValuesList[i];
      cmdResult['commandName'] = cmdRequest.commandName;
  }

  return cmdResults;

}



/**
* _execute()
*
* Executes one powershell command generated by _generateCommand(),
* returns a promise when fulfilled returns the cmdResult object from the command
* which contains 3 properties (command, stdout, stderr)
*
* On reject an error message
*
* @param array of commands
*/
PSCommandService.prototype._execute = function(command) {
  var self = this;
  return new Promise(function(fulfill,reject) {
    self._executeCommands([command])
    .then(function(cmdResults) {
      fulfill(cmdResults[0]); // only one will return
    }).catch(function(error) {
      reject('unexpected error getting executing command: ' + error + "\n" + error.stack);
    });
  });
}


/**
* _executeCommands()
*
* Executes one or more powershell commands generated by _generateCommand(),
* returns a promise when fulfilled returns an hash of results in the form:

* { <command> : {command: <command>, stdout: value, stderr: value }}
*
* On reject an error message
*
* @param array of commands
*/
PSCommandService.prototype._executeCommands = function(commands) {
    var self = this;

    var logBuffer = "";
    for (var i=0; i<commands.length; i++) {
        logBuffer += commands[i] + "\n";
    }

    console.log('#########################\nExecuting:\n'+logBuffer+'\n#########################');


    return new Promise(function(fulfill,reject) {
        self._statefulProcessCommandProxy.executeCommands(commands)
        .then(function(cmdResults) {
            fulfill(cmdResults);
        }).catch(function(error) {
            reject('unexpected error getting executing commands: ' + error + "\n" + error.stack);
        });
    });
}

/**
* _generateCommand()
*
* @param commandConfig a command config object that the argumentMap will be applied to
* @param argument2ValueMap map of argument names -> values (valid for the passed commandConfig)
*
* @return a formatted powershell command string suitable for execution
*
* !!!! TODO: review  security protection for "injection" (i.e command termination, newlines etc)
*/
PSCommandService.prototype._generateCommand = function(commandConfig, argument2ValueMap) {

    var argumentsConfig = commandConfig.arguments;

    var argumentsString = "";

    for (var argumentName in argumentsConfig) {

        if(argumentsConfig.hasOwnProperty(argumentName)) {

            var argument = argumentsConfig[argumentName];

            // is argument valued
            if ((argument.hasOwnProperty('valued') ? argument.valued : true)) {

                var isQuoted = (argument.hasOwnProperty('quoted') ? argument.quoted : true);
                var passedArgValues = argument2ValueMap[argumentName];

                if (!(passedArgValues instanceof Array)) {

                    if (typeof passedArgValues === 'undefined') {

                        if (argument.hasOwnProperty('default')) {
                            passedArgValues = [argument.default];
                        } else {
                            passedArgValues = [];
                        }

                    } else {
                        passedArgValues = [passedArgValues];
                    }
                }

                var argumentValues = "";
                for (var i=0; i<passedArgValues.length; i++) {

                    var passedArgValue = passedArgValues[i];

                    var valueToSet;

                    if (passedArgValue && passedArgValue != 'undefined') {
                        valueToSet = passedArgValue;

                    } else if (argument.hasOwnProperty('default')) {
                        valueToSet = argument.default;
                    }

                    // append the value
                    if (valueToSet && valueToSet.trim().length > 0) {

                        // sanitize
                        valueToSet = this._sanitize(valueToSet);

                        // append w/ quotes (SINGLE QUOTES, not double to avoid expansion)
                        argumentValues += (this._finalizeParameterValue(valueToSet,isQuoted) + ",");
                    }
                }

                // were values appended?
                if (argumentValues.length > 0) {

                    // append to arg string
                    argumentsString += (("-"+argumentName+" ") + argumentValues);

                    if (argumentsString.lastIndexOf(',') == (argumentsString.length -1)) {
                        argumentsString = argumentsString.substring(0,argumentsString.length-1);
                    }
                    argumentsString += " ";
                }

                // argument is NOT valued, just append the name
            } else {
                argumentsString += ("-"+argumentName+" ");
            }

        }

    }

    return Mustache.render(commandConfig.command,{'arguments':argumentsString});
}

PSCommandService.prototype._finalizeParameterValue = function(valueToSet, applyQuotes) {
    valueToSet = ((applyQuotes?"'":'')+valueToSet+(applyQuotes?"'":''));

    return valueToSet;
}

PSCommandService.prototype._sanitize = function(toSanitize) {
    toSanitize.replace(/(\n)/g, "\\$1"); // escape newlines

    // escape stuff that could screw up variables, or break quoting
    return toSanitize.replace(/(['`#])/g, "`$1");
}
